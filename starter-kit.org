#+TITLE: Emacs 起步套件
#+OPTIONS: toc:2 num:nil ^:nil

#+BEGIN_QUOTE
Emacs 犹如中午的太阳辉耀着群星般令所有其它的编辑软件失色。它不止是大而亮；它只是
令所有其它的一切都消失了。

-- 尼尔．史迪芬森，《起初，只有命令行》
#+END_QUOTE

* 简介
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
这个套件提供的内容应该比你通常打开 Emacs 时的默认设置更全面些。虽然它针对的是初
学者，但也对所有层次的用户提供了一个很好的 elisp 初始化结构。

这个 Emacs 起步套件主要优点有
- 更佳的默认设置
- 包含许多有用的库和配置
- 嵌入在 Org-mode 文件中的“文学”配置方法
- 有组织的目录结构
- 采用 git 来提供版本控制、备份和共享

最新的英文版本参见 http://github.com/eschulte/emacs24-starter-kit/

最新的中文版本参见 http://github.com/exaos/emacs24-starter-kit/

** 学习
   :PROPERTIES:
   :CUSTOM_ID: learning
   :END:
这儿不会教你如何使用 Emacs, 但会令它用起来更舒服。要访问教程，请在 Emacs 里按
control-h, 然后再按 t.

英文版的 [[http://emacswiki.org][Emacs Wiki]] 用起来很顺手。中文的资料暂且参考：
  - 水木清华 BBS 的 [[http://www.newsmth.net/nForum/#!board/Emacs][Emacs 版]] 以及该版 [[http://smacs.github.io/][在 GitHub 上的资料]]
  - [[http://emacser.com/][Emacs 中文网]]

** 安装
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:

1. 安装 Emacs 24 或以上版本。如果你有软件包管理器并且在软件仓库中有 Emacs 24 的
   包，就直接使用它，否则直接从 [[http://savannah.gnu.org/projects/emacs/][源代码]] 安装吧；针对 Mac 的二进制包可以如后站点的
   /nightlies/ 中下载: http://emacsformacosx.com/builds
2. 使用 git 检出本套件的一个版本 -- 如果你是个 git 新手，先读一个这个 [[http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html][git-教程]]
   (英文), 并且我们强烈建议你使用 Emacs 的 [[http://zagadka.vm.bytemark.co.uk/magit/magit.html][magit]] mode 来与 git 进行交互。
   #+begin_src sh
     git clone http://github.com/eschulte/emacs24-starter-kit.git
   #+end_src
3. 切换到最终生成的目录 =~/.emacs.d= [1]
7. 启动 Emacs!

安装之后，你需要重启 Emacs 一到两次，以便它从 [[* Emacs Lisp Package Archive][ELPA]] 下载扩展包 -- 来自
=*tromey.com:80*= 的一些 HTML 解析错误可以放心地忽略掉。

如果升级后你丢失了一些自动加载的内容 (应该显示为 =void function: foobar= 之类的
错误), 试试 =M-x regen-autoloads=.

如果你想保留自己常规的 =~/.emacs.d= 不变，而仅仅用起步套件启动一个实例，试试如下
调用方式：

#+begin_src sh
  emacs -q -l ~/path/to/emacs24-starter-kit/init.el
#+end_src

注意，如果已经有了 =~/.emacs= 文件，它有可能会覆盖掉起步套件的加载，所以如果你在
加载时有问题，要确保此文件不存在。

** 结构
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:
文件 =init.el= 是所有配置加载开始的地方。它会在 Emacs 启动时自动加载，它的主要目
的是载嵌入在此文件中的 elisp 代码。此文件会加载一些最小通用的配置，然后再加载用
户指定的配置文件，相应的位置参见紧接着的 [[customization][配置]] 一节内容。

** 配置
   :PROPERTIES:
   :CUSTOM_ID: customization
   :tangle:   no
   :END:

The defaults built into the starter kit are only the beginning of
most users customization of Emacs to suit their needs.  The starter
kit provides a number of places for additional user and system
specific customization.  These are designed in such a way that it will
be easy for you to continue tracking your own personal customization
inside the starter-kit while retaining your ability to pull down
general starter-kit updates without conflict.

- git branch :: The first step to user-specific customization is (like
     in any git project) to MAKE A BRANCH FOR YOUR LOCAL CHANGES.
     Save the master branch for pulling down new versions of the
     starter kit, and save all of your personal information in a
     personal branch.  That way you never have to worry about
     accidentally =git push='ing up a patch with all of your gnus
     email passwords.

- User specific config :: Your personal configuration information can
     be stored in a user-specific-config file.  This is the file named
     after your user with the extensions =.el= or =.org= [2].  If
     you're unsure of your user name evaluate the following code block
     to find out.
     #+begin_src sh
       echo $USER # note: on windows this is the USERNAME variable
     #+end_src

     If your configuration starts to feel cramped in a single file
     (although with the nested headlines of an Org-mode file, that
     could take a while) and you want to stretch your config's legs,
     you can also create a directory named after your system user
     name.  If a such a directory exists, it will be added to the
     load-path, and any elisp or org-mode w/embedded elisp files in it
     will be loaded.

- System specific config :: Finally, you may want to configure
     different settings for different machines.  The Starter Kit will
     look for a file named after the current hostname ending in =.el=
     or =.org= which will allow host-specific configuration.  If
     you're unsure of your hostname the following can be executed to
     find out.
     #+begin_src sh
       hostname
     #+end_src

- Activating more of the starter kit :: By default, the starter kit
     only includes customizations which are likely to be useful across
     nearly any Emacs install (the only automatically loaded external
     files are those listed in [[#load-the-starter-kit-core][Load the rest of the starter kit core]]).
     You may have noticed that there are many other
     =starter-kit-*.org= files located in this directory.  A good
     first step is to browse these files and begin optionally loading
     those that look relevant to your workflow.  For example, if you
     often work with Python source code you will probably want to load
     =starter-kit-python.org= either by directly copying the sections
     that look useful into your personal config, or simply by loading
     the entire file directly with the following.
     #+begin_src emacs-lisp
       (starter-kit-load "python")
     #+end_src

     Alternately you can load only one particular subsection of an
     included file, for example to load just the "pretty-summary"
     section of =starter-kit-gnus.org= run the following.
     #+begin_src emacs-lisp
       (starter-kit-load "gnus" "pretty-summary")
     #+end_src
     
     Finally you can load just those subsections of a file which have
     a specific tag, so to load just the two sections of
     =starter-kit-misc-recommended.org= which are tagged =visual= add
     the following to your personal initialization.  Note: header id's
     take priority over tags.
     #+begin_src emacs-lisp
       (starter-kit-load "gnus" "visual")
     #+end_src

- Installing more elisp libraries :: The easiest way to install new
     libraries is through the Emacs Lisp Package Archive (see [[#emacs-lisp-package-archive][Emacs
     Lisp Package Archive]] below).  When a library is not available
     through ELPA you can grab it's source and place it directly in
     the =src= directory.  Any packages found there will automatically
     be added to your load-path when Emacs starts up, and are
     guaranteed not to conflict with future starter-kit updates.

- Misc :: Some additional miscellaneous configuration and getting
     started suggestions
   - First see the [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Customization.html#Customization][Customization]] node in the Emacs manual.  Available
     online or through the =info= command (run with =C-h i=).
   - =grep='ing through the =starter-kit-*= files in this directory
     can provide useful examples for how to do things like install
     major modes, define keybindings, etc..
   - read the following [[http://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html][Key-Binding-Conventions]] before defining too
     many personal key bindings

*** Optional starter kit packages
The following customization packages are shipped with the starter kit
but are not loaded by default.  If you have code which you find
generally useful please submit it to the starter kit core!
- [[file:starter-kit-eshell.org][eshell]]
- [[file:starter-kit-g-client.org][g-client]]
- [[file:starter-kit-gnus.org][gnus]]
- [[file:starter-kit-haskell.org][haskell]]
- [[file:starter-kit-js.org][js]]
- [[file:starter-kit-lisp.org][lisp]]
- [[file:starter-kit-misc-recommended.org][misc-recommended]]
- [[file:starter-kit-org.org][org]]
- [[file:starter-kit-perl.org][perl]]
- [[file:starter-kit-python.org][python]]
- [[file:starter-kit-ruby.org][ruby]]

** Emacs Lisp 扩展包存档
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp-package-archive
   :END:

最好有来自于 [[http://tromey.com/elpa][ELPA]] 的可用扩展包，因为相应的依赖关系会自动解决掉，并且不需要用户自
己去更新包。 ELPA 目前已经成为 Emacs 正式发行的一部分，因此下载与安装扩展包已不
再需要特殊的设置。通过 ELPA 安装的扩展争会在此目录的 =elpa/= 子目录下。

** 反馈与贡献
   :PROPERTIES:
   :CUSTOM_ID: contributing
   :END:
如果你有自己使用 Emacs 的方式，请试试用这个起步套件替换一会你通常的启动文件。如
果有些东西你不可缺少，就添加进来或者告诉我以便我来添加。先从 [[file:init.el][init.el]] 里的内容开
始吧。

除非特别声明，文件均采用与 Emacs 相同的授权。详情参照 [[file:COPYING][版权文件]]。

最新英文版位于 http://github.com/eschulte/emacs24-starter-kit/

* 实现
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

本节包含所有 Emacs 起步套件的代码实现。除非你对实现起步套件的代码感兴趣，那么到
这儿就可以不用读下去了。

** 起步套件基础内容
- 加载路径等
  #+name: starter-kit-load-paths
  #+begin_src emacs-lisp
    (add-to-list 'load-path starter-kit-dir)
    (setq autoload-file (concat starter-kit-dir "loaddefs.el"))
    (setq package-user-dir (concat starter-kit-dir "elpa"))
    (setq custom-file (concat starter-kit-dir "custom.el"))
  #+end_src

- 无处不在的包不要在需要时才加载，而应该在启动时就加载了，因为它们几乎在每个程序
  对话中都会用到。
  #+name: starter-kit-load-on-startup
  #+begin_src emacs-lisp
    (require 'cl)
    (require 'saveplace)
    (require 'ffap)
    (require 'uniquify)
    (require 'ansi-color)
    (require 'recentf)
  #+end_src

- ELPA 档案仓库和两个默认安装的包
  #+begin_src emacs-lisp
    (setq package-archives
          '(("gnu"         . "http://elpa.gnu.org/packages/")
            ("original"    . "http://tromey.com/elpa/")
            ("org"         . "http://orgmode.org/elpa/")
            ("marmalade"   . "http://marmalade-repo.org/packages/")))
    (package-initialize)
    
    (defvar starter-kit-packages
      (list 'yasnippet-bundle)
      "Libraries that should be installed by default.")
    
    (unless package-archive-contents
      (package-refresh-contents))
    (dolist (package starter-kit-packages)
      (unless (package-installed-p package)
        (package-install package)))
  #+end_src

- 用于加载起步套件其它部分的函数
  #+name: starter-kit-load
  #+begin_src emacs-lisp
    (defun starter-kit-load (file &optional header-or-tag)
      "Load configuration from other starter-kit-*.org files.
    If the optional argument is the id of a subtree then only
    configuration from within that subtree will be loaded.  If it is
    not an id then it will be interpreted as a tag, and only subtrees
    marked with the given tag will be loaded.
    
    For example, to load all of starter-kit-lisp.org simply
    add (starter-kit-load \"lisp\") to your configuration.
    
    To load only the 'window-system' config from
    starter-kit-misc-recommended.org add
     (starter-kit-load \"misc-recommended\" \"window-system\")
    to your configuration."
      (let ((file (expand-file-name (if (string-match "starter-kit-.+\.org" file)
                                        file
                                      (format "starter-kit-%s.org" file))
                                    starter-kit-dir)))
        (org-babel-load-file
         (if header-or-tag
             (let* ((base (file-name-nondirectory file))
                    (dir  (file-name-directory file))
                    (partial-file (expand-file-name
                                   (concat "." (file-name-sans-extension base)
                                           ".part." header-or-tag ".org")
                                   dir)))
               (unless (file-exists-p partial-file)
                 (with-temp-file partial-file
                   (insert
                    (with-temp-buffer
                      (insert-file-contents file)
                      (save-excursion
                        (condition-case nil ;; collect as a header
                            (progn
                              (org-link-search (concat"#"header-or-tag))
                              (org-narrow-to-subtree)
                              (buffer-string))
                          (error ;; collect all entries with as tags
                           (let (body)
                             (org-map-entries
                              (lambda ()
                                (save-restriction
                                  (org-narrow-to-subtree)
                                  (setq body (concat body "\n" (buffer-string)))))
                              header-or-tag)
                             body))))))))
               partial-file)
           file))))
  #+end_src

- 处理一个由于 OS X 使用完全域名 (FQDN) 所导致的 bug
  #+name: starter-kit-osX-workaround
  #+begin_src emacs-lisp
    (if (eq system-type 'darwin)
        (setq system-name (car (split-string system-name "\\."))))
  #+end_src

** 起步套件核心
   :PROPERTIES:
   :CUSTOM_ID: starter-kit-core
   :END:
The following files contain the remainder of the core of the Emacs
Starter Kit.  All of the code in this section should be loaded by
everyone using the starter kit.

- Starter kit function definitions in [[file:starter-kit-defuns.org][starter-kit-defuns]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-defuns.org")
  #+end_src

- Key Bindings in [[file:starter-kit-bindings.org][starter-kit-bindings]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-bindings.org")
  #+end_src

- Miscellaneous settings in [[file:starter-kit-misc.org][starter-kit-misc]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-misc.org")
  #+end_src

- Registers for jumping to commonly used files in [[file:starter-kit-registers.org][starter-kit-registers]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-registers.org")
  #+end_src

- [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs.  It is
  inspired by TextMate's templating syntax.
  - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
  - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

  load the yasnippet bundle
  #+begin_src emacs-lisp
    (add-to-list 'load-path
                 (expand-file-name  "yasnippet"
                                    (expand-file-name "src"
                                                      starter-kit-dir)))
    (require 'yasnippet)
    (yas/initialize)
  #+end_src

  load the snippets defined in the =./snippets/= directory
  #+begin_src emacs-lisp
    (yas/load-directory (expand-file-name "snippets" starter-kit-dir))
  #+end_src

  The latest version of yasnippets doesn't play well with Org-mode, the
  following function allows these two to play nicely together.
  #+begin_src emacs-lisp
    (defun yas/org-very-safe-expand ()
      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
    
    (defun yas/org-setup ()
      ;; yasnippet (using the new org-cycle hooks)
      (make-variable-buffer-local 'yas/trigger-key)
      (setq yas/trigger-key [tab])
      (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
      (define-key yas/keymap [tab] 'yas/next-field))
    
    (add-hook 'org-mode-hook #'yas/org-setup)
  #+end_src

** 加载用户／系统指定文件
*** 系统／用户指定配置
You can keep system- or user-specific customizations here in either
raw emacs-lisp files or as embedded elisp in org-mode files (as done
in this document).

You can keep elisp source in the =src= directory.  Packages loaded
from here will override those installed by ELPA.  This is useful if
you want to track the development versions of a project, or if a
project is not in elpa.

After we've loaded all the Starter Kit defaults, lets load the User's stuff.
#+name: starter-kit-load-files
#+begin_src emacs-lisp
  (flet ((sk-load (base)
           (let* ((path          (expand-file-name base starter-kit-dir))
                  (literate      (concat path ".org"))
                  (encrypted-org (concat path ".org.gpg"))
                  (plain         (concat path ".el"))
                  (encrypted-el  (concat path ".el.gpg")))
             (cond
              ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
              ((file-exists-p encrypted-el)  (load encrypted-el))
              ((file-exists-p literate)      (org-babel-load-file literate))
              ((file-exists-p plain)         (load plain)))))
         (remove-extension (name)
           (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
           (match-string 1 name)))
    (let ((elisp-dir (expand-file-name "src" starter-kit-dir))
          (user-dir (expand-file-name user-login-name starter-kit-dir)))
      ;; add the src directory to the load path
      (add-to-list 'load-path elisp-dir)
      ;; load specific files
      (when (file-exists-p elisp-dir)
        (let ((default-directory elisp-dir))
          (normal-top-level-add-subdirs-to-load-path)))
      ;; load system-specific config
      (sk-load system-name)
      ;; load user-specific config
      (sk-load user-login-name)
      ;; load any files in the user's directory
      (when (file-exists-p user-dir)
        (add-to-list 'load-path user-dir)
        (mapc #'sk-load
              (remove-duplicates
               (mapcar #'remove-extension
                       (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
               :test #'string=)))))
#+end_src

*** 来自 =M-x customize= 的配置
#+name: m-x-customize-customizations
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src

* 脚注

[1] 如果你已经有一个目录为 =~/.emacs.d=, 把它移走，并用本目录替换它。

[2] 此 emacs 起步套件使用 [[http://orgmode.org/][Org Mode]] 来加载直接嵌入在文学化 Org-mode 文档中的
    elisp 代码。
