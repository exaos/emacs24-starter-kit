#+TITLE: Emacs 起步套件
#+OPTIONS: toc:2 num:nil ^:nil

#+begin_quote
  Emacs 犹如中午的太阳辉耀着群星般令所有其它的编辑软件失色。它不止是大而亮；它只
  是令所有其它的一切都消失了。

  -- 尼尔．史迪芬森，《起初，只有命令行》
#+end_quote

* 简介
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
这个套件提供的内容应该比你通常打开 Emacs 时的默认设置更全面些。虽然它针对的是初
学者，但也对所有层次的用户提供了一个很好的 elisp 初始化结构。

这个 Emacs 起步套件主要优点有
- 更佳的默认设置
- 包含许多有用的库和配置
- 嵌入在 Org-mode 文件中的“文学”配置方法
- 有组织的目录结构
- 采用 git 来提供版本控制、备份和共享

最新的英文版本参见 http://github.com/eschulte/emacs24-starter-kit/

最新的中文版本参见 http://github.com/exaos/emacs24-starter-kit/

** 学习
   :PROPERTIES:
   :CUSTOM_ID: learning
   :END:
这儿不会教你如何使用 Emacs, 但会令它用起来更舒服。要访问教程，请在 Emacs 里按
control-h, 然后再按 t.

英文版的 [[http://emacswiki.org][Emacs Wiki]] 用起来很顺手。中文的资料暂且参考：
  - 水木清华 BBS 的 [[http://www.newsmth.net/nForum/#!board/Emacs][Emacs 版]] 以及该版 [[http://smacs.github.io/][在 GitHub 上的资料]]
  - [[http://emacser.com/][Emacs 中文网]]

** 安装
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:

1. 安装 Emacs 24 或以上版本。如果你有软件包管理器并且在软件仓库中有 Emacs 24 的
   包，就直接使用它，否则直接从 [[http://savannah.gnu.org/projects/emacs/][源代码]] 安装吧；针对 Mac 的二进制包可以如后站点的
   /nightlies/ 中下载: http://emacsformacosx.com/builds
2. 使用 git 检出本套件的一个版本 -- 如果你是个 git 新手，先读一个这个 [[http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html][git-教程]]
   (英文), 并且我们强烈建议你使用 Emacs 的 [[http://zagadka.vm.bytemark.co.uk/magit/magit.html][magit]] mode 来与 git 进行交互。
   #+begin_src sh
     git clone http://github.com/eschulte/emacs24-starter-kit.git
   #+end_src
3. 切换到最终生成的目录 =~/.emacs.d= [1]
4. 启动 Emacs!

安装之后，你需要重启 Emacs 一到两次，以便它从 [[* Emacs Lisp Package Archive][ELPA]] 下载扩展包 -- 来自
=*tromey.com:80*= 的一些 HTML 解析错误可以放心地忽略掉。

如果升级后你丢失了一些自动加载的内容 (应该显示为 =void function: foobar= 之类的
错误), 试试 =M-x regen-autoloads=.

如果你想保留自己常规的 =~/.emacs.d= 不变，而仅仅用起步套件启动一个实例，试试如下
调用方式：

#+begin_src sh
  emacs -q -l ~/path/to/emacs24-starter-kit/init.el \
        --eval "(run-hooks 'after-init-hook)"
#+end_src

注意，如果已经有了 =~/.emacs= 文件，它有可能会覆盖掉起步套件的加载，所以如果你在
加载时有问题，要确保此文件不存在。

** 结构
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:
文件 =init.el= 是所有配置加载开始的地方。它会在 Emacs 启动时自动加载，它的主要目
的是载嵌入在此文件中的 elisp 代码。此文件会加载一些最小通用的配置，然后再加载用
户指定的配置文件，相应的位置参见紧接着的 [[customization][配置]] 一节内容。

** 配置
   :PROPERTIES:
   :CUSTOM_ID: customization
   :tangle:   no
   :END:

此起步套件集成的默认设置仅仅是多数用户调整 Eamcs 的配置来满足自己需求的第一步。此
起步套件预留一些位置用以进行额外的用户和系统定制设置。这些设计旨在方便让你在此起
步套件中继续自己的个性设置，并且能够避免因为常规套件升级而带来的冲突。

- git branch :: 进行用户定制设置的第一步是（像其它任何 git 项目一样）为你自己的本
     地变更创建一个新分支。保存主分支用于检取出起步套件的新版本，而你所有的个人信
     息均保存在个人分支中。这些，你就不用担心意外的命令 =git push= 会修改了你的
     gnus 电子邮件密码。

- 用户定制配置 :: 你的个人配置信息可以保存在一个“用户定义配置”文件中。这是一个
     以你的用户名来命名的以 =.el= 或 =.org= 结尾的文件[2]。如果你不确定自己的用户
     名是什么，可用如下的指令来查找。
     #+begin_src sh
       echo $USER # note: on windows this is the USERNAME variable
     #+end_src

     如果你的配置文件在一个文件中显得杂乱难辨（尽管可以在 Org-mode 文件中用嵌套的
     标题行，这也颇费时间），而你又想扩展自己的配置，则可以创建一个以你的系统用户
     名命名的目录。如果这样的目录存在，它会被自动添加到 ~load-path~ 中，此目录下
     的任何 elisp 文件或 org-mode 中嵌入的 elisp 代码都将会被加载。

- 系统定制配置 :: 最后，你或许会想为不同的机器定制不同的设置。此启动套件会寻找一
     个以当前机器名命名的以 =.el= 或 =.org= 结尾的文件，该文件中保留有为主机定制
     的配置。如果你对机器名不确定，可执行如下命令来寻找。
     #+begin_src sh
       hostname
     #+end_src

- 激活起步套件的更多功能 :: 默认情况下，起步套件只包含这些配置，它们尽可能适用几
     乎所有的 Emacs 安装版本（只自动加载这些外部文件，参见[[#load-the-starter-kit-core][加载起步套件核心扩展]]）。
     你可能注意到此目录下有许多其它的 =starter-kit-*.org= 文件。最佳选择是先浏览
     这些这些文件，然后选择性地加载那些与你的工作流程相关的内容。比如，你只需要处
     理 Python 源代码，你则可能需要加载 =starter-kit-python.org= 文件，可以直接拷
     贝其内容到你的个人配置文件中，或者直接这样加载整个文件：
     #+begin_src emacs-lisp
       (starter-kit-load "python")
     #+end_src

     另外，你还可以只加载包含文件中特定的某个小节，比如只加载
     =starter-kit-gnus.org= 文件中 "pretty-summary" 小节的内容，则可执行如下代码：
     #+begin_src emacs-lisp
       (starter-kit-load "gnus" "pretty-summary")
     #+end_src

     最后，你还可以只加载文件中带有指定标签的小节，比如只加载文件
     =starter-kit-misc-recommended.org= 中带有 =visual= 标签的小节以便满足你的个
     性初始化。注意：头部 ID 的优先级要高于标签。
     #+begin_src emacs-lisp
       (starter-kit-load "gnus" "visual")
     #+end_src

- 安装更多的 elisp 库 :: 安装新库的最简单办法就是通过 Emacs Lisp 包档案库（参见下
     面的 [[#emacs-lisp-package-archive][Emacs Lisp Package Archive]] 内容）。当某个库不在 ELPA 中时，你可以抓取其
     源代码直接存放在 =src= 目录下。当 Emacs 启动时，此目录下找到的任何软件包均会
     自动添加到你的 ~load-path~ 中，并且不会与将来的起步套件升级相冲突。

- 杂项 :: 一些额外的杂项配置和起步建议
    - 首先，参考 Emacs 手册中 [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Customization.html#Customization][Customization]] 一节的内容。该内容可在线或者通过
      =info= 命令 (运行 =C-h i=) 来查看。
    - 查找 (=grep=) 此目录下 =starter-kit-*= 文件中的内容，可得到一些有用的示例，
      比如如何安装 major 模式，定义按键绑定，等等。
    - 在定义更多的个人按键绑定之前，先阅读后面的 [[http://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html][Key-Binding-Conventions]] 内容。

*** 可选的起步套件包
随同起步套件一起的还有如下的定制包，但不会默认加载。如果你发现一些通用的代码，请
提交给起步套件核心团队！
- [[file:starter-kit-eshell.org][eshell]]
- [[file:starter-kit-g-client.org][g-client]]
- [[file:starter-kit-gnus.org][gnus]]
- [[file:starter-kit-haskell.org][haskell]]
- [[file:starter-kit-js.org][js]]
- [[file:starter-kit-lisp.org][lisp]]
- [[file:starter-kit-misc-recommended.org][misc-recommended]]
- [[file:starter-kit-org.org][org]]
- [[file:starter-kit-perl.org][perl]]
- [[file:starter-kit-python.org][python]]
- [[file:starter-kit-ruby.org][ruby]]

** Emacs Lisp 扩展包存档
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp-package-archive
   :END:

最好使用用来自于 [[http://tromey.com/elpa][ELPA]] 的可用的扩展包，因为相应的依赖关系会自动解决掉，并且不需要
用户自己去更新包。 ELPA 目前已经成为 Emacs 正式发行的一部分，因此下载与安装扩展包
已不再需要特殊的设置。通过 ELPA 安装的扩展会存放在此目录的 =elpa/= 子目录下。

** 反馈与贡献
   :PROPERTIES:
   :CUSTOM_ID: contributing
   :END:
如果你有自己使用 Emacs 的方式，请试试用这个起步套件替换一会你通常的启动文件。如果
有些东西你不可缺少，就添加进来，或者告诉我让我来添加。先从 [[file:init.el][init.el]] 里的内容开始吧。

除非特别声明，文件均采用与 Emacs 相同的授权。详情参照 [[file:COPYING][版权文件]]。

最新英文版位于 http://github.com/eschulte/emacs24-starter-kit/

* 实现
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

本节包含所有 Emacs 起步套件的代码实现。除非你对实现起步套件的代码感兴趣，那么到
这儿就可以不用读下去了。

** 起步套件基础内容
- 加载路径等
  #+name: starter-kit-load-paths
  #+begin_src emacs-lisp
    (let ((elisp-dir (expand-file-name "src" starter-kit-dir)))
      ;; add the src directory to the load path
      (add-to-list 'load-path elisp-dir)
      ;; load specific files
      (when (file-exists-p elisp-dir)
        (let ((default-directory elisp-dir))
          (normal-top-level-add-subdirs-to-load-path))))
    (setq autoload-file (concat starter-kit-dir "loaddefs.el"))
    (setq package-user-dir (concat starter-kit-dir "elpa"))
    (setq custom-file (concat starter-kit-dir "custom.el"))
  #+end_src

- 无处不在的包不要在需要时才加载，而应该在启动时就加载了，因为它们几乎在每个程序
  对话中都会用到。
  #+name: starter-kit-load-on-startup
  #+begin_src emacs-lisp
    (require 'cl)
    (require 'saveplace)
    (require 'ffap)
    (require 'uniquify)
    (require 'ansi-color)
    (require 'recentf)
  #+end_src

- Function to check if a packages exist in the load path.  This may be
  used to preempt the installation of ELPA versions of packages whose
  source may already be found in the load path.
  #+name: starter-kit-loadable
  #+begin_src emacs-lisp
    (defun starter-kit-loadable-p (package)
      "Check if PACKAGE is loadable from a directory in `load-path'."
      (let ((load-file (concat (symbol-name package) ".el")))
        (catch 'file-found
          (dolist (dir load-path)
            (let ((path (expand-file-name load-file dir)))
              (when (file-exists-p path)
                (throw 'file-found path)))))))
  #+end_src

- ELPA 档案仓库和两个默认安装的包
  #+begin_src emacs-lisp
      (setq package-archives
            '(("gnu"         . "http://elpa.gnu.org/packages/")
              ("org"         . "http://orgmode.org/elpa/")
              ("melpa"       . "http://melpa.milkbox.net/packages/")
              ("marmalade"   . "http://marmalade-repo.org/packages/")))
      (package-initialize)

      (defvar starter-kit-packages nil
	"默认应该安装的库（当前为空）。")

      (defun starter-kit-install-if-needed (&rest packages)
	"若软件包未加载或者本地没有安装，则使用 ELPA 安装它。"
        (when packages
          (unless package-archive-contents
            (package-refresh-contents))
          (dolist (package packages)
            (unless (or (starter-kit-loadable-p package)
                        (package-installed-p package))
              (package-install package)))))
  #+end_src

- 用于加载起步套件其它部分的函数
  #+name: starter-kit-load
  #+begin_src emacs-lisp
    (defun starter-kit-load (file &optional header-or-tag)
      "从其它的 starter-kit-*.org 文件中加载配置。如果可选的参数是子项
    的 ID, 则只加载此子项的内容。如果它不是 ID, 则解析为标签，只有标记
    此标签的子项会被加载。

    比如，要加载 start-kit-lisp.org 中的所有内容，在你的配置中添加
    (starter-kit-load \"lisp\") 即可。

    如果只从 starter-kit-misc-recommended.org 中加载 'window-system'
    的配置，则在你的配置中添加
     (starter-kit-load \"misc-recommended\" \"window-system\")"
      (let ((file (expand-file-name (if (string-match "starter-kit-.+\.org" file)
                                        file
                                      (format "starter-kit-%s.org" file))
                                    starter-kit-dir)))
        (org-babel-load-file
         (if header-or-tag
             (let* ((base (file-name-nondirectory file))
                    (dir  (file-name-directory file))
                    (partial-file (expand-file-name
                                   (concat "." (file-name-sans-extension base)
                                           ".part." header-or-tag ".org")
                                   dir)))
               (unless (file-exists-p partial-file)
                 (with-temp-file partial-file
                   (insert
                    (with-temp-buffer
                      (insert-file-contents file)
                      (save-excursion
                        (condition-case nil ;; collect as a header
                            (progn
                              (org-link-search (concat"#"header-or-tag))
                              (org-narrow-to-subtree)
                              (buffer-string))
                          (error ;; collect all entries with as tags
                           (let (body)
                             (org-map-entries
                              (lambda ()
                                (save-restriction
                                  (org-narrow-to-subtree)
                                  (setq body (concat body "\n" (buffer-string)))))
                              header-or-tag)
                             body))))))))
               partial-file)
           file))))
  #+end_src

- 处理一个由于 OS X 使用完全域名 (FQDN) 所导致的 bug
  #+name: starter-kit-osX-workaround
  #+begin_src emacs-lisp
    (if (or
         (eq system-type 'darwin)
         (eq system-type 'berkeley-unix))
        (setq system-name (car (split-string system-name "\\."))))
  #+end_src

** 起步套件核心
   :PROPERTIES:
   :CUSTOM_ID: starter-kit-core
   :END:
如下文件包含了 Emacs 起步套件的其余核心部件。任何使用此套件的人都需要加载此节的所
有代码。

- 启动套件函数在 [[file:starter-kit-defuns.org][starter-kit-defuns]] 中定义
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-defuns.org")
  #+end_src

- 按键绑定在 [[file:starter-kit-bindings.org][starter-kit-bindings]] 中定义
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-bindings.org")
  #+end_src

- 杂项设置在 [[file:starter-kit-misc.org][starter-kit-misc]] 中
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-misc.org")
  #+end_src

- 跳转到的常用文件的注册使用  [[file:starter-kit-registers.org][starter-kit-registers]]
  #+begin_src emacs-lisp
  (starter-kit-load "starter-kit-registers.org")
  #+end_src

** 加载用户／系统指定文件
*** 系统／用户指定配置
你可以在此处保留系统或用户指定的配置，用 emacs-lisp 文件，或者嵌入在 Org-mode 文
件中的 elisp 代码（此文件中没有）。

你可以保留 =src= 目录下的 elisp 源码。此处加载的软件包会覆盖掉那些通过 ELPA 安装
的包。如果你想追踪一个项目的开发版本，或者某个项目不在 ELPA 中是，这样做很有用。

当我们加载所有默认的起步套件后，再来加载一些用户的东西。
#+name: starter-kit-load-files
#+begin_src emacs-lisp
  (flet ((sk-load (base)
           (let* ((path          (expand-file-name base starter-kit-dir))
                  (literate      (concat path ".org"))
                  (encrypted-org (concat path ".org.gpg"))
                  (plain         (concat path ".el"))
                  (encrypted-el  (concat path ".el.gpg")))
             (cond
              ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
              ((file-exists-p encrypted-el)  (load encrypted-el))
              ((file-exists-p literate)      (org-babel-load-file literate))
              ((file-exists-p plain)         (load plain)))))
         (remove-extension (name)
           (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
           (match-string 1 name)))
    (let ((user-dir (expand-file-name user-login-name starter-kit-dir)))
      ;; load system-specific -- 加载系统指定配置
      (sk-load system-name)
      ;; load user-specific config -- 加载用户指定配置
      (sk-load user-login-name)
      ;; load any files in the user's directory -- 加载用户目录下的任意文件
      (when (file-exists-p user-dir)
        (add-to-list 'load-path user-dir)
        (mapc #'sk-load
              (remove-duplicates
               (mapcar #'remove-extension
                       (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
               :test #'string=)))))
#+end_src

*** 来自 =M-x customize= 的配置
#+name: m-x-customize-customizations
#+begin_src emacs-lisp
  (load custom-file 'noerror)
#+end_src

* 脚注

[1] 如果你已经有一个目录为 =~/.emacs.d=, 把它移走，并用本目录替换它。

[2] 此 emacs 起步套件使用 [[http://orgmode.org/][Org Mode]] 来加载直接嵌入在文学化 Org-mode 文档中的
    elisp 代码。
